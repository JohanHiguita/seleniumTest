// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');
const md5 = require('md5');

function changeTimezone(date, ianatz) {

    // suppose the date is 12:00 UTC
    var invdate = new Date(date.toLocaleString('en-US', {
        timeZone: ianatz
    }));

    // then invdate will be 07:00 in Toronto
    // and the diff is 5 hours
    var diff = date.getTime() - invdate.getTime();

    // so 12:00 in Toronto is 17:00 UTC
    return new Date(date.getTime() - diff - (60 * 60 * 5 * 1000)); // needs to substract
  
}

describe('Sign Up', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
        driver = await new Builder().forBrowser('chrome').build()
        vars = {}
  })
  afterEach(async function() {
        await driver.quit();
  })
  it('Sign Up', async function() {
        let email = 'humarmorenobravo+test' + new Date().getTime() + '@gmail.com';
        let date = changeTimezone(new Date(), 'America/Toronto');

        let dateFirst = date.toJSON().split('T').join(' ').substr(0, 15);
        let dateSecond = (new Date(date.getTime() - 60 * 10 * 1000)).toJSON().split('T').join(' ').substr(0, 15);

        let code1 = ('' + parseInt(md5('3t65AtXgJnBrYv4d' + email + dateFirst + '3t65AtXgJnBrYv4d').substr(0, 10), 16)).substr(0, 4);
        let code2 = ('' + parseInt(md5('3t65AtXgJnBrYv4d' + email + dateSecond + '3t65AtXgJnBrYv4d').substr(0, 10), 16)).substr(0, 4);

        // Test name: Sign Up
        // Step # | name | target | value
        // 1 | open | / | 
        await driver.get("https://dev-www.talent.com/sas");
        
        // 4 | setWindowSize | 1287x580 | 
        await driver.manage().window().setRect(1287, 580);
        await driver.manage().addCookie({ name: 'sas-token', value: 'V0010_bZRTrx8KjmmO90mewWrQ11soxm-35NtwnVCNWgoQo8TkkAjZM39WC7qEwbepDTxdLZWxGeHAiko-Uf1wG4Rg%2A%2A', domain: '.talent.com', httpOnly: true});

        await driver.get("https://dev-www.talent.com/");
        // 5 | click | linkText=Sign in | 
        await driver.findElement(By.linkText("Sign in")).click()
        // 6 | click | name=phoneOrMailCheck | 
        await driver.findElement(By.name("phoneOrMailCheck")).click()
        // 7 | type | name=phoneOrMailCheck | ${myEmail}
        await driver.findElement(By.name("phoneOrMailCheck")).sendKeys(email)
        // 8 | click | id=buttonCheckEmail | 
        await driver.findElement(By.id("buttonCheckEmail")).click()
        // 11 | click | name=confirmCode | 
        await driver.findElement(By.name("confirmCode")).click()
        // 12 | type | name=confirmCode | 1234
        await driver.findElement(By.name("confirmCode")).sendKeys("1234")
        // 13 | click | id=buttonConfirmCode | 
        await driver.findElement(By.id("buttonConfirmCode")).click();
        // 14 | type | name=confirmCode | ${myCode}
        await driver.findElement(By.name("confirmCode")).sendKeys(code1)
        
        if (!!await driver.executeScript("return (document.querySelector(\'[class=\"error-message has--error\"]\') !== null)")) {
            await driver.findElement(By.name("confirmCode")).sendKeys(code2);
        }

        // 15 | click | id=buttonConfirmCode | 
        await driver.findElement(By.id("buttonConfirmCode")).click()
        // 16 | click | css=.button--middleText | 
        await driver.findElement(By.css(".button--middleText")).click()
        // 17 | click | id=buttonCheckEmail | 
        await driver.findElement(By.id("buttonCheckEmail")).click()
  })
})
